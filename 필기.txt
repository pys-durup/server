http://eclipse.org

1. 우측 상단 Download 버튼
2. Download Packages 클릭
3. Eclipse IDE for Enterprise Java Developers Windows x86_64 다운로드

JDK 확인
- C:\Program Files\Java
- C:\Program Files\Java\jdk1.8

http://oracle.com
1. 상단 메뉴 > Products > Software > Java 클릭
2. 맨하단 > Download Java now 클릭
3. Java SE 8 > JDK Download 링크 클릭
4. 테이블 목록 > Windows x64 > jdk-8u281-windows-x64.exe(166.97 MB)
5. 설치

운영체제		JDK		이클립스
32bit		32bit		32bit //오래된 노트북 상황

64bit		32bit		32bit

64bit		64bit		64bit //강의실 상황

64bit		64bit		32bit //권장X


D:\class\client //이전 수업
D:\class\server 폴더 생성

- encoding
  1. Workspaces > UTF-8
  2. CSS Files > UTF-8(맨위)
  3. HTML File > UTF-8(맨위)
  4. JSP File > UTF-8(맨위)

Apache Tomcat
- http://apache.org
- 맨하단 프로젝트 > Tomcat 클릭
- 좌측 Download > Tomcat 8 클릭
- Binary Distributions > 64-bit Windows zip 다운로드
- 압축 해제
- C:\apache-tomcat-8.5.61 이동

이클립스 <-> 아파치 톰캣
- 이클립스 > 환경 설정 > "server" 검색 > Runtime Environments 
> Add > v8.5 > Browse > "C:\apache-tomcat-8.5.61" 선택 > Finish 

이클립스 -> 아파치 톰캣 제어 //인스턴스 등록
- Servers 탭 > 링크 클릭 > v8.5 > next > finish
- 등록된 아파치 8.5를 더블클릭 > Ports > HTTP/1.1 > 8080 -> 8090 변경 > Ctrl + S


프로젝트 생성
1. New > Other > Web > Dynamic Web Project
2. Project name : "ServletTest" 
3. next, next, finish


Dynamic Web Project 구조
1. Deployment Descriptor: 사용X
2. JAX-WS Web Services: 사용X
3. Java Resources(******)
   - 작업할 Java 소스를 관리하는 폴더
   3.1 src > 소스 폴더
   3.2 Labraries > 외부 참조 jar
4. build: 사용X
5. WebContent(******)
   - 작업할 클라이언트 소스를 관리하는 폴더
   - 작업할 서버 소스를 관리하는 폴더
   - 브라우저를 통해서 요청되는 모든 리소스의 루트 폴더
   - *.html, *.css, *.js, 이미지, 동영상 등...
   - *.jsp
   5.a META-INF: 사용X
   5.b WEB-INF: 사용O
      - 서버 설정과 관련된 파일을 저장하는 폴더
      5.b.a : lib > *.jar 저장 폴더
      5.b.b : web.xml > 서버 운영에 관련된 설정을 저장하는 파일(세팅)
	

Java 서버 기술
- Servlet > JSP
- 서버측 기술, Server-side Programming
- 자바를 사용해서 동적으로 웹페이지를 만드는 기술(***)
- ex) hello.html + 인삿말
	1. 사람 > 툴 > 코딩 > 저장
	2. 자바 프로그램 > 클래스(API) > hello.html 소스 동적 생성(코딩) > 파일 저장
	
	
Servlet, 서블릿
- 자바 진영에서 처음으로 시도한 웹 서버 기술
- Server + Applet


Servlet Class, 서블릿 클래스
- *.jar 참조 > 누가 제공? > Serlvet Container가 제공 > Servlet Container는 뭐냐? > Servlet Container는 서블릿 제작에 필요한 여러가지 환경을 제공하고, 실행에 필요한 환경도 제공하는 제작+실행 환경 > "아파치 톰캣"


Apache Tomcat
1. Apache 프로그램
	- 웹 서버 > 웹 서비스를 제공하는 프로그램 > WS
	- 고객(브라우저)의 요청이 들어오면 해당 자원을 찾아서 돌려주는 프로그램
2. Tomcat 프로그램
	- 웹 어플리케이션 서버 > WAS(Web Application Server)
	- 웹 서버측에서 자바를 실행할 수 있는 환경을 제공하는 프로그램


Servlet 작업 규칙
-> Servlet 클래스를 선언해야 한다.
-> 각종 규칙을 지켜서 만들어야 WAS에 의해서 Servlet 클래스가 관리를 받을 수 있다.

1. 서블릿 클래스 선언하기
	a. javax.servlet.Servlet 인터페이스를 구현한다.(복잡함)
	a. javax.servlet.http.HttpServlet 클래스를 상속한다.(간편함) ***** 선호

2. doGet/doPost 메소드 선언
	- 둘 중 하나 선언 or 둘 다 선언
	- 반드시 1개 이상은 존재해야 한다.
	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 실행되는 메소드
	- "서버에게 브라우저가 페이지를 달라고 요청을 하면 실행되는 메소드"
	- 이 메소드내에서 동적으로 HTML 페이지를 만든다.(*********************)
	- 메소드 작성 규칙
		a. 매개 변수 작성(2개)
			1. javax.servlet.http.HttpServletRequest
			2. javax.servlet.http.HttpServletResponse
		b. 예외 미루기(2개)
			1. java.io.IOException
			2. java.servlet.ServletException

3. 동적 HTML 문서 작성 구현
	- HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 반환
	- PrintWritert 객체의 printXXX(), write() 메소드를 가지고 브라우저에게 돌려줄 HTML 소스를 작성한다.(아까 Gugugdan.java의 FileWriter 역할과 동일)

4. 가상 주소 매핑
	- 자바 파일(*.java)은 웹을 통해서 요청/응답할 수 없다.
	- 브라우저가 자바 파일을 호출할 수 있도록 가상 주소를 만들어서 서로 연결한다.
	- WAS(Tomca) 관리 > web.xml(Deployment Descriptor, 배포 서술자)



Servlet -> JSP -> Servlet + JSP (현재 시점)

수업
1. Servlet(맛보기)
2. JSP(본론) -> 서버의 대부분 수업(이론)
3. Servlet + JSP -> 15년~현재 -> 실무적인 수업 -> Spring 













